/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Option, OptionOrNullable } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  bytes,
  dataEnum,
  option,
  struct,
  tuple,
  u16,
  u32,
} from '@metaplex-foundation/umi/serializers';
import {
  RateLimitParams,
  RateLimitParamsArgs,
  getRateLimitParamsSerializer,
} from '.';

export type PeerConfigParam =
  | { __kind: 'PeerAddress'; fields: [Uint8Array] }
  | { __kind: 'FeeBps'; fields: [Option<number>] }
  | { __kind: 'EnforcedOptions'; send: Uint8Array; sendAndCall: Uint8Array }
  | { __kind: 'OutboundRateLimit'; fields: [Option<RateLimitParams>] }
  | { __kind: 'InboundRateLimit'; fields: [Option<RateLimitParams>] };

export type PeerConfigParamArgs =
  | { __kind: 'PeerAddress'; fields: [Uint8Array] }
  | { __kind: 'FeeBps'; fields: [OptionOrNullable<number>] }
  | { __kind: 'EnforcedOptions'; send: Uint8Array; sendAndCall: Uint8Array }
  | {
      __kind: 'OutboundRateLimit';
      fields: [OptionOrNullable<RateLimitParamsArgs>];
    }
  | {
      __kind: 'InboundRateLimit';
      fields: [OptionOrNullable<RateLimitParamsArgs>];
    };

export function getPeerConfigParamSerializer(): Serializer<
  PeerConfigParamArgs,
  PeerConfigParam
> {
  return dataEnum<PeerConfigParam>(
    [
      [
        'PeerAddress',
        struct<GetDataEnumKindContent<PeerConfigParam, 'PeerAddress'>>([
          ['fields', tuple([bytes({ size: 32 })])],
        ]),
      ],
      [
        'FeeBps',
        struct<GetDataEnumKindContent<PeerConfigParam, 'FeeBps'>>([
          ['fields', tuple([option(u16())])],
        ]),
      ],
      [
        'EnforcedOptions',
        struct<GetDataEnumKindContent<PeerConfigParam, 'EnforcedOptions'>>([
          ['send', bytes({ size: u32() })],
          ['sendAndCall', bytes({ size: u32() })],
        ]),
      ],
      [
        'OutboundRateLimit',
        struct<GetDataEnumKindContent<PeerConfigParam, 'OutboundRateLimit'>>([
          ['fields', tuple([option(getRateLimitParamsSerializer())])],
        ]),
      ],
      [
        'InboundRateLimit',
        struct<GetDataEnumKindContent<PeerConfigParam, 'InboundRateLimit'>>([
          ['fields', tuple([option(getRateLimitParamsSerializer())])],
        ]),
      ],
    ],
    { description: 'PeerConfigParam' }
  ) as Serializer<PeerConfigParamArgs, PeerConfigParam>;
}

// Data Enum Helpers.
export function peerConfigParam(
  kind: 'PeerAddress',
  data: GetDataEnumKindContent<PeerConfigParamArgs, 'PeerAddress'>['fields']
): GetDataEnumKind<PeerConfigParamArgs, 'PeerAddress'>;
export function peerConfigParam(
  kind: 'FeeBps',
  data: GetDataEnumKindContent<PeerConfigParamArgs, 'FeeBps'>['fields']
): GetDataEnumKind<PeerConfigParamArgs, 'FeeBps'>;
export function peerConfigParam(
  kind: 'EnforcedOptions',
  data: GetDataEnumKindContent<PeerConfigParamArgs, 'EnforcedOptions'>
): GetDataEnumKind<PeerConfigParamArgs, 'EnforcedOptions'>;
export function peerConfigParam(
  kind: 'OutboundRateLimit',
  data: GetDataEnumKindContent<
    PeerConfigParamArgs,
    'OutboundRateLimit'
  >['fields']
): GetDataEnumKind<PeerConfigParamArgs, 'OutboundRateLimit'>;
export function peerConfigParam(
  kind: 'InboundRateLimit',
  data: GetDataEnumKindContent<
    PeerConfigParamArgs,
    'InboundRateLimit'
  >['fields']
): GetDataEnumKind<PeerConfigParamArgs, 'InboundRateLimit'>;
export function peerConfigParam<K extends PeerConfigParamArgs['__kind']>(
  kind: K,
  data?: any
): Extract<PeerConfigParamArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isPeerConfigParam<K extends PeerConfigParam['__kind']>(
  kind: K,
  value: PeerConfigParam
): value is PeerConfigParam & { __kind: K } {
  return value.__kind === kind;
}
