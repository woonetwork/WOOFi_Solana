/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Option, OptionOrNullable, PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  bool,
  dataEnum,
  option,
  publicKey as publicKeySerializer,
  struct,
  tuple,
  u16,
} from '@metaplex-foundation/umi/serializers';

export type SetOFTConfigParams =
  | { __kind: 'Admin'; fields: [PublicKey] }
  | { __kind: 'Delegate'; fields: [PublicKey] }
  | { __kind: 'DefaultFee'; fields: [number] }
  | { __kind: 'Paused'; fields: [boolean] }
  | { __kind: 'Pauser'; fields: [Option<PublicKey>] }
  | { __kind: 'Unpauser'; fields: [Option<PublicKey>] };

export type SetOFTConfigParamsArgs =
  | { __kind: 'Admin'; fields: [PublicKey] }
  | { __kind: 'Delegate'; fields: [PublicKey] }
  | { __kind: 'DefaultFee'; fields: [number] }
  | { __kind: 'Paused'; fields: [boolean] }
  | { __kind: 'Pauser'; fields: [OptionOrNullable<PublicKey>] }
  | { __kind: 'Unpauser'; fields: [OptionOrNullable<PublicKey>] };

export function getSetOFTConfigParamsSerializer(): Serializer<
  SetOFTConfigParamsArgs,
  SetOFTConfigParams
> {
  return dataEnum<SetOFTConfigParams>(
    [
      [
        'Admin',
        struct<GetDataEnumKindContent<SetOFTConfigParams, 'Admin'>>([
          ['fields', tuple([publicKeySerializer()])],
        ]),
      ],
      [
        'Delegate',
        struct<GetDataEnumKindContent<SetOFTConfigParams, 'Delegate'>>([
          ['fields', tuple([publicKeySerializer()])],
        ]),
      ],
      [
        'DefaultFee',
        struct<GetDataEnumKindContent<SetOFTConfigParams, 'DefaultFee'>>([
          ['fields', tuple([u16()])],
        ]),
      ],
      [
        'Paused',
        struct<GetDataEnumKindContent<SetOFTConfigParams, 'Paused'>>([
          ['fields', tuple([bool()])],
        ]),
      ],
      [
        'Pauser',
        struct<GetDataEnumKindContent<SetOFTConfigParams, 'Pauser'>>([
          ['fields', tuple([option(publicKeySerializer())])],
        ]),
      ],
      [
        'Unpauser',
        struct<GetDataEnumKindContent<SetOFTConfigParams, 'Unpauser'>>([
          ['fields', tuple([option(publicKeySerializer())])],
        ]),
      ],
    ],
    { description: 'SetOFTConfigParams' }
  ) as Serializer<SetOFTConfigParamsArgs, SetOFTConfigParams>;
}

// Data Enum Helpers.
export function setOFTConfigParams(
  kind: 'Admin',
  data: GetDataEnumKindContent<SetOFTConfigParamsArgs, 'Admin'>['fields']
): GetDataEnumKind<SetOFTConfigParamsArgs, 'Admin'>;
export function setOFTConfigParams(
  kind: 'Delegate',
  data: GetDataEnumKindContent<SetOFTConfigParamsArgs, 'Delegate'>['fields']
): GetDataEnumKind<SetOFTConfigParamsArgs, 'Delegate'>;
export function setOFTConfigParams(
  kind: 'DefaultFee',
  data: GetDataEnumKindContent<SetOFTConfigParamsArgs, 'DefaultFee'>['fields']
): GetDataEnumKind<SetOFTConfigParamsArgs, 'DefaultFee'>;
export function setOFTConfigParams(
  kind: 'Paused',
  data: GetDataEnumKindContent<SetOFTConfigParamsArgs, 'Paused'>['fields']
): GetDataEnumKind<SetOFTConfigParamsArgs, 'Paused'>;
export function setOFTConfigParams(
  kind: 'Pauser',
  data: GetDataEnumKindContent<SetOFTConfigParamsArgs, 'Pauser'>['fields']
): GetDataEnumKind<SetOFTConfigParamsArgs, 'Pauser'>;
export function setOFTConfigParams(
  kind: 'Unpauser',
  data: GetDataEnumKindContent<SetOFTConfigParamsArgs, 'Unpauser'>['fields']
): GetDataEnumKind<SetOFTConfigParamsArgs, 'Unpauser'>;
export function setOFTConfigParams<K extends SetOFTConfigParamsArgs['__kind']>(
  kind: K,
  data?: any
): Extract<SetOFTConfigParamsArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isSetOFTConfigParams<K extends SetOFTConfigParams['__kind']>(
  kind: K,
  value: SetOFTConfigParams
): value is SetOFTConfigParams & { __kind: K } {
  return value.__kind === kind;
}
