/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  defaultPublicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type WithdrawFeeInstructionAccounts = {
  admin: Signer;
  oftStore: PublicKey | Pda;
  tokenMint: PublicKey | Pda;
  tokenEscrow: PublicKey | Pda;
  tokenDest: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type WithdrawFeeInstructionData = {
  discriminator: Uint8Array;
  feeLd: bigint;
};

export type WithdrawFeeInstructionDataArgs = { feeLd: number | bigint };

export function getWithdrawFeeInstructionDataSerializer(): Serializer<
  WithdrawFeeInstructionDataArgs,
  WithdrawFeeInstructionData
> {
  return mapSerializer<
    WithdrawFeeInstructionDataArgs,
    any,
    WithdrawFeeInstructionData
  >(
    struct<WithdrawFeeInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['feeLd', u64()],
      ],
      { description: 'WithdrawFeeInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([14, 122, 231, 218, 31, 238, 223, 150]),
    })
  ) as Serializer<WithdrawFeeInstructionDataArgs, WithdrawFeeInstructionData>;
}

// Args.
export type WithdrawFeeInstructionArgs = WithdrawFeeInstructionDataArgs;

// Instruction.
export function withdrawFee(
  context: Pick<Context, 'programs'>,
  input: WithdrawFeeInstructionAccounts & WithdrawFeeInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('oft', defaultPublicKey(), 'custom')

  // Accounts.
  const resolvedAccounts = {
    admin: {
      index: 0,
      isWritable: false as boolean,
      value: input.admin ?? null,
    },
    oftStore: {
      index: 1,
      isWritable: false as boolean,
      value: input.oftStore ?? null,
    },
    tokenMint: {
      index: 2,
      isWritable: false as boolean,
      value: input.tokenMint ?? null,
    },
    tokenEscrow: {
      index: 3,
      isWritable: true as boolean,
      value: input.tokenEscrow ?? null,
    },
    tokenDest: {
      index: 4,
      isWritable: true as boolean,
      value: input.tokenDest ?? null,
    },
    tokenProgram: {
      index: 5,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: WithdrawFeeInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getWithdrawFeeInstructionDataSerializer().serialize(
    resolvedArgs as WithdrawFeeInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
