/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  defaultPublicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import { OFTType, OFTTypeArgs, getOFTTypeSerializer } from '../types';

// Accounts.
export type InitOftInstructionAccounts = {
  payer?: Signer;
  oftStore: PublicKey | Pda;
  lzReceiveTypesAccounts: PublicKey | Pda;
  tokenMint: PublicKey | Pda;
  tokenEscrow: Signer;
  tokenProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type InitOftInstructionData = {
  discriminator: Uint8Array;
  oftType: OFTType;
  admin: PublicKey;
  sharedDecimals: number;
  endpointProgram: Option<PublicKey>;
};

export type InitOftInstructionDataArgs = {
  oftType: OFTTypeArgs;
  admin: PublicKey;
  sharedDecimals: number;
  endpointProgram: OptionOrNullable<PublicKey>;
};

export function getInitOftInstructionDataSerializer(): Serializer<
  InitOftInstructionDataArgs,
  InitOftInstructionData
> {
  return mapSerializer<InitOftInstructionDataArgs, any, InitOftInstructionData>(
    struct<InitOftInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['oftType', getOFTTypeSerializer()],
        ['admin', publicKeySerializer()],
        ['sharedDecimals', u8()],
        ['endpointProgram', option(publicKeySerializer())],
      ],
      { description: 'InitOftInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([182, 169, 147, 16, 201, 45, 76, 23]),
    })
  ) as Serializer<InitOftInstructionDataArgs, InitOftInstructionData>;
}

// Args.
export type InitOftInstructionArgs = InitOftInstructionDataArgs;

// Instruction.
export function initOft(
  context: Pick<Context, 'payer' | 'programs'>,
  input: InitOftInstructionAccounts & InitOftInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('oft', defaultPublicKey(), 'custom')

  // Accounts.
  const resolvedAccounts = {
    payer: {
      index: 0,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    oftStore: {
      index: 1,
      isWritable: true as boolean,
      value: input.oftStore ?? null,
    },
    lzReceiveTypesAccounts: {
      index: 2,
      isWritable: true as boolean,
      value: input.lzReceiveTypesAccounts ?? null,
    },
    tokenMint: {
      index: 3,
      isWritable: false as boolean,
      value: input.tokenMint ?? null,
    },
    tokenEscrow: {
      index: 4,
      isWritable: true as boolean,
      value: input.tokenEscrow ?? null,
    },
    tokenProgram: {
      index: 5,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    systemProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: InitOftInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitOftInstructionDataSerializer().serialize(
    resolvedArgs as InitOftInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
